# sneaker_manager/app/services.pyfrom app.database import get_dbfrom app.repositories.sneaker_repository import SneakerRepositoryfrom sqlalchemy import and_, or_, funcfrom app.models import Sneakerclass SneakerService:    @staticmethod    def create_sneaker(sneaker_data: dict):        # 添加数据验证（例如 size 必须大于 0）        if sneaker_data.get("size", 0) <= 0:            raise ValueError("鞋码必须大于零")        # 添加默认状态        if "status" not in sneaker_data or not sneaker_data["status"]:            sneaker_data["status"] = "使用中"        with get_db() as db:            return SneakerRepository.create(db, sneaker_data)    @staticmethod    def get_all_sneakers():        with get_db() as db:            return SneakerRepository.get_all(db)    @staticmethod    def delete_sneaker(sneaker_id: int):        with get_db() as db:            return SneakerRepository.delete(db, sneaker_id)    @staticmethod    def search_sneakers(            keyword: str = None,            brand: str = None,            min_price: float = None,            max_price: float = None    ):        """        增强版搜索功能        - 支持中英文空格分隔的多关键词搜索        - 支持拼音首字母搜索        - 智能模糊匹配        """        with get_db() as db:            query = db.query(Sneaker)            if keyword:                # 仅使用存储的拼音字段进行查询                kw_like = f"%{keyword}%"                query = query.filter(                    or_(                        Sneaker.name.ilike(kw_like),                        Sneaker.brand.ilike(kw_like),                        Sneaker.series.ilike(kw_like),                        Sneaker.name_pinyin.ilike(kw_like)                    )                )            # 品牌筛选            if brand:                query = query.filter(Sneaker.brand == brand)            # 价格范围筛选            price_filters = []            if min_price is not None:                price_filters.append(Sneaker.purchase_price >= min_price)            if max_price is not None:                price_filters.append(Sneaker.purchase_price <= max_price)            if price_filters:                query = query.filter(and_(*price_filters))            # 关键词智能搜索            if keyword:                # 处理多关键词                keywords = [k.strip() for k in keyword.split() if k.strip()]                # 构建模糊搜索条件                conditions = []                for kw in keywords:                    kw_like = f"%{kw}%"                    conditions.append(or_(                        Sneaker.name.ilike(kw_like),                        Sneaker.brand.ilike(kw_like),                        Sneaker.series.ilike(kw_like),                        Sneaker.name_pinyin.ilike(f"%{kw}%")  # 需要添加拼音字段                    ))                query = query.filter(and_(*conditions))            return query.order_by(Sneaker.purchase_date.desc()).all()    @staticmethod    def update_sneaker(sneaker_id, update_data):        with get_db() as db:            sneaker = db.query(Sneaker).filter(Sneaker.id == sneaker_id).first()            if not sneaker:                raise ValueError("找不到指定球鞋")            for key, value in update_data.items():                setattr(sneaker, key, value)            db.commit()            db.refresh(sneaker)            return sneaker    @staticmethod    def get_total_sneakers() -> object:        """获取球鞋总数"""        with get_db() as db:            return db.query(Sneaker).count()    @staticmethod    def get_brand_stats():        """获取品牌统计信息"""        with get_db() as db:            brands = db.query(                Sneaker.brand,                func.count(Sneaker.id).label('count'),                func.sum(Sneaker.purchase_price).label('total')            ).group_by(Sneaker.brand).all()            return {                "total_brands": len({b.brand for b in brands if b.brand}),                "total_value": sum(b.total for b in brands if b.total)            }    @staticmethod    def get_formatted_total_value():        """获取格式化的总价值"""        total = SneakerService.get_brand_stats()["total_value"] or 0        return f"¥{total:,.0f}"