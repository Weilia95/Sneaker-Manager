# sneaker_manager/app/ui.pyfrom PIL import Image, ImageTkimport osimport customtkinter as ctkfrom tkinter import filedialog, messageboxfrom PIL import Imagefrom .services import SneakerServicefrom .utils import resize_image, open_image_previewfrom datetime import datetimefrom .UI_rating_page import RatingPageclass SneakerApp(ctk.CTk):    def __init__(self):        super().__init__()        self.title("Sneaker Manager v0.2")        self.geometry("1300x900")        # 初始化图像资源        self._load_images()        # 配置布局        self.grid_rowconfigure(0, weight=1)        self.grid_columnconfigure(1, weight=1)        # 创建导航栏        self._create_navigation()        # 创建各功能框架        self._create_home_frame() #第一页        self._create_management_frame() #第二页        self._create_usage_frame() #第三页        self._create_rating_frame() #第四页        self._create_settings_frame() #第五页        self._create_search_widgets() #第二页的搜素功能        # 默认显示管理界面        self.select_frame_by_name("home")        # 添加页面切换事件监听        self.bind("<<FrameChanged>>", lambda e: self.refresh_home_stats())    def _load_images(self):        """加载所有图像资源"""        image_path = os.path.join(os.path.dirname(__file__), "assets")        # 导航图标        self.nav_images = {            "home": ctk.CTkImage(                light_image=Image.open(os.path.join(image_path, "1home_light.png")),                dark_image=Image.open(os.path.join(image_path, "1home_dark.png")),                size=(24, 24)),            "smaster": ctk.CTkImage(                light_image=Image.open(os.path.join(image_path, "2sneaker_light.png")),                dark_image=Image.open(os.path.join(image_path, "2sneaker_dark.png")),                size=(24, 24)),            "usage": ctk.CTkImage(                light_image=Image.open(os.path.join(image_path, "3usage_light.png")),                dark_image=Image.open(os.path.join(image_path, "3usage_dark.png")),                size=(24, 24)),            "ratings": ctk.CTkImage(                light_image=Image.open(os.path.join(image_path, "4ratings_light.png")),                dark_image=Image.open(os.path.join(image_path, "4ratings_dark.png")),                size=(24, 24)),            "settings": ctk.CTkImage(                light_image=Image.open(os.path.join(image_path, "5settings_light.png")),                dark_image=Image.open(os.path.join(image_path, "5settings_dark.png")),                size=(24, 24))        }        # 其他图像        self.logo_image = ctk.CTkImage(            Image.open(os.path.join(image_path, "logo.png")),            size=(40, 40))    def _create_navigation(self):        """创建左侧导航栏"""        self.navigation_frame = ctk.CTkFrame(self, corner_radius=0, width=200)        self.navigation_frame.grid(row=0, column=0, sticky="nsew")        self.navigation_frame.grid_rowconfigure(6, weight=1)        # 应用Logo        ctk.CTkLabel(            self.navigation_frame,            text=" SNEAKER\n MANAGER",            image=self.logo_image,            compound="left",            font=ctk.CTkFont(family="Arial", size=16, weight="bold")        ).grid(row=0, column=0, padx=15, pady=30)        # 导航按钮        nav_buttons = [            ("home", "概览主页", self.home_button_event),            ("smaster", "球鞋管理", self.smaster_button_event),            ("usage","球鞋使用", self.usage_button_event),            ("ratings", "球鞋评分", self.ratings_button_event),            ("settings","设置",self.settings_button_event)        ]        for idx, (name, text, command) in enumerate(nav_buttons, 1):            btn = ctk.CTkButton(                self.navigation_frame,                corner_radius=0,                height=45,                text=text,                image=self.nav_images[name],                anchor="w",                command=command,                fg_color="transparent",                text_color=("gray10", "gray90"),                hover_color=("gray70", "gray30")            )            btn.grid(row=idx, column=0, sticky="ew", padx=10)        # 主题切换        ctk.CTkLabel(self.navigation_frame, text="界面主题:").grid(row=6, column=0, pady=(20, 5))        self.appearance_menu = ctk.CTkOptionMenu(            self.navigation_frame,            values=["System", "Light", "Dark"],            command=self._change_appearance_mode        )        self.appearance_menu.grid(row=7, column=0, padx=10, pady=(0, 20))    def _create_home_frame(self):        """创建概览主页"""        self.home_frame = ctk.CTkFrame(self, corner_radius=0, fg_color="transparent")        # 获取实时数据        stats_data = SneakerService.get_brand_stats()        total_sneakers = SneakerService.get_total_sneakers()        stats = [            ("球鞋数量", str(total_sneakers), "#9AA5FC"),            ("品牌数量", str(stats_data["total_brands"]), "#4CCEAC"),            ("总价值", SneakerService.get_formatted_total_value(), "#FFB476"),            ("平均价值", f"¥{stats_data['total_value'] / total_sneakers:,.0f}", "#9AA5FC") if total_sneakers > 0 else (            "平均价值", "N/A", "#9AA5FC")        ]        # 统计卡片容器        stats_grid = ctk.CTkFrame(self.home_frame)        stats_grid.pack(pady=30, padx=20, fill="both")        for idx, (title, value, color) in enumerate(stats):            card = ctk.CTkFrame(stats_grid, width=200, height=120)            card.grid(row=0, column=idx, padx=15)            ctk.CTkLabel(card, text=title, font=("微软雅黑", 14)).pack(pady=(15, 5))            ctk.CTkLabel(card, text=value, font=("微软雅黑", 24, "bold"), text_color=color).pack()    def refresh_home_stats(self):        """刷新首页统计数据"""        if self.home_frame.winfo_ismapped():            # 销毁旧组件            for widget in self.home_frame.winfo_children():                widget.destroy()            # 重新创建            self._create_home_frame()    def _create_management_frame(self):        """创建核心管理界面"""        self.management_frame = ctk.CTkFrame(self, corner_radius=0, fg_color="transparent")        # 输入表单区域        input_frame = ctk.CTkFrame(self.management_frame)        input_frame.pack(pady=20, padx=20, fill="x")        # 输入字段        self.entries = {}        fields = [            ("name", "球鞋名称"),            ("brand", "品牌"),            ("series", "系列"),            ("size", "鞋码"),            ("price", "购买价格"),            ("date", "购买日期"),            ("color","颜色")        ]        for idx, (field, label) in enumerate(fields):            fields_per_row = 3            row = idx // fields_per_row            col = idx % fields_per_row * 2            ctk.CTkLabel(input_frame, text=label).grid(row=row, column=col, padx=5, pady=5)            entry = ctk.CTkEntry(input_frame, width=120)            entry.grid(row=row, column=col + 1, padx=5, pady=5)            self.entries[field] = entry        # 操作按钮        btn_frame = ctk.CTkFrame(input_frame)        btn_frame.grid(row=4, column=2, columnspan=4, pady=10)        ctk.CTkButton(btn_frame, text="上传图片", command=self._handle_upload).pack(side="left", padx=5)        ctk.CTkButton(btn_frame, text="添加记录", command=self._add_sneaker).pack(side="left", padx=5)        ctk.CTkButton(btn_frame, text="清空表单", command=self._clear_form).pack(side="left", padx=5)        # 数据列表        self.list_frame = ctk.CTkScrollableFrame(            self.management_frame,            width=800,            height=400        )        self.list_frame.pack(pady=20, padx=20, fill="both", expand=True)        self._load_list()    def _create_usage_frame(self):        """创建统计页面"""        self.usage_frame = ctk.CTkFrame(self, corner_radius=0, fg_color="transparent")        ctk.CTkLabel(self.usage_frame, text="球鞋使用模块开发中...这个模块让用户输入每日使用情况。并且可以让用户对单双球鞋查看使用情况和数据统计", font=("微软雅黑", 16)).pack(pady=50)    def _create_rating_frame(self):        """创建球鞋评分页面"""        self.ratings_frame = ctk.CTkFrame(self, corner_radius=0, fg_color="transparent")        # 将容器框架传递给RatingPage        self.rating_page = RatingPage(self.ratings_frame)        # 确保容器框架的布局正确        self.ratings_frame.grid_rowconfigure(0, weight=1)        self.ratings_frame.grid_columnconfigure(0, weight=1)    def _create_settings_frame(self):        """创建设置页面"""        self.settings_frame = ctk.CTkFrame(self, corner_radius=0, fg_color="transparent")        ctk.CTkLabel(self.settings_frame, text="设置页面开发中...", font=("微软雅黑", 16)).pack(pady=50)    def select_frame_by_name(self, name):        """切换显示框架"""        self.home_frame.grid_forget()        self.management_frame.grid_forget()        self.usage_frame.grid_forget()        self.ratings_frame.grid_forget()        self.settings_frame.grid_forget()        if name == "home":            self.refresh_home_stats()  # 新增：每次进入首页强制刷新            self.home_frame.grid(row=0, column=1, sticky="nsew")        elif name == "smaster":            self.management_frame.grid(row=0, column=1, sticky="nsew")        elif name == "usage":            self.usage_frame.grid(row=0, column=1, sticky="nsew")        elif name == "ratings":            self.ratings_frame.grid(row=0, column=1, sticky="nsew")        elif name == "settings":            self.settings_frame.grid(row=0, column=1, sticky="nsew")    def _handle_upload(self):        """处理图片上传"""        path = filedialog.askopenfilename(            filetypes=[("Image Files", "*.png;*.jpg;*.jpeg")]        )        if path:            try:                # 将图片复制到应用目录                target_dir = os.path.join(os.path.dirname(__file__), "uploads")                os.makedirs(target_dir, exist_ok=True)                filename = f"{datetime.now().strftime('%Y%m%d%H%M%S')}.{path.split('.')[-1]}"                target_path = os.path.join(target_dir, filename)                with Image.open(path) as img:                    img.save(target_path)                self.image_path = target_path                messagebox.showinfo("上传成功", "图片已保存")            except Exception as e:                messagebox.showerror("上传失败", str(e))    def _add_sneaker(self):        """添加新球鞋"""        try:            # 数据验证            required_fields = ["name", "brand", "price", "date"]            for field in required_fields:                if not self.entries[field].get().strip():                    raise ValueError(f"{field} 字段不能为空")            sneaker_data = dict(name=self.entries["name"].get(), brand=self.entries["brand"].get(),                                series=self.entries["series"].get(),                                size=float(self.entries["size"].get()) if self.entries["size"].get() else None,                                purchase_price=float(self.entries["price"].get()),                                purchase_date=self._validate_date(self.entries["date"].get()),                                image_path=self.image_path, color=self.entries["color"].get())            # 调用服务层            SneakerService.create_sneaker(sneaker_data)            # 重置界面            self._clear_form()            self._load_list()            messagebox.showinfo("成功", "球鞋已添加")            self._load_list()  # 刷新列表            if self.home_frame.winfo_ismapped():  # 如果当前在首页                self.refresh_home_stats()  # 立即刷新        except ValueError as e:            messagebox.showerror("输入错误", str(e))        except Exception as e:            messagebox.showerror("系统错误", f"保存失败: {str(e)}")    def _load_list(self, sneakers=None):        """加载/刷新球鞋列表"""        # 清空旧内容        for widget in self.list_frame.winfo_children():            widget.destroy()        # 获取数据        if sneakers is None:            sneakers = SneakerService.get_all_sneakers()        # 创建卡片        for sneaker in sneakers:            self._create_sneaker_card(sneaker)    def _create_sneaker_card(self, sneaker):        """创建单个球鞋卡片"""        card = ctk.CTkFrame(self.list_frame)        card.pack(fill="x", pady=5, padx=10)        # 图片显示        img_frame = ctk.CTkFrame(card, width=100)        img_frame.pack(side="left", fill="y")        if sneaker.image_path and os.path.exists(sneaker.image_path):            img = resize_image(sneaker.image_path, (80, 80))            img_label = ctk.CTkLabel(img_frame, image=img, text="")            img_label.image = img            img_label.pack(padx=5)            img_label.bind("<Button-1>", lambda e, p=sneaker.image_path: open_image_preview(p))        else:            ctk.CTkLabel(img_frame, text="[无图]", width=80).pack(pady=10)        # 信息显示        info_frame = ctk.CTkFrame(card)        info_frame.pack(side="left", fill="both", expand=True, padx=10)        info_text = (            f"名称：{sneaker.name}\n"            f"品牌：{sneaker.brand} | 系列：{sneaker.series}\n"            f"鞋码：{sneaker.size or '未填写'} | 颜色：{sneaker.color}\n"            f"购入日期：{sneaker.purchase_date} | 价格：¥{sneaker.purchase_price:.2f}\n"        )        ctk.CTkLabel(info_frame, text=info_text, anchor="w").pack(fill="x")        # 操作按钮        btn_frame = ctk.CTkFrame(card)        btn_frame.pack(side="right", padx=10)        ctk.CTkButton(            btn_frame,            text="编辑",            width=80,            command=lambda s=sneaker: self._open_edit_dialog(s)        ).pack(side="left", padx=5)        ctk.CTkButton(            btn_frame,            text="删除",            width=80,            fg_color="#dc3545",            hover_color="#bb2d3b",            command=lambda s=sneaker.id: self._delete_sneaker(s)        ).pack(side="left", padx=5)    def _open_edit_dialog(self, sneaker):        self.dialog = ctk.CTkToplevel(self)        self.dialog.title(f"编辑 - {sneaker.name}")        self.dialog.geometry("500x750")        self.dialog.grab_set()        self.dialog.grid_columnconfigure(1, weight=1)        self.entries = {}        fields = [            ("name", "球鞋名称", sneaker.name),            ("brand", "品牌", sneaker.brand),            ("series", "系列", sneaker.series),            ("size", "鞋码", sneaker.size),            ("price", "购买价格", sneaker.purchase_price),            ("date", "购买日期", sneaker.purchase_date),        ]        for row, (field, label, value) in enumerate(fields):            ctk.CTkLabel(self.dialog, text=label).grid(row=row, column=0, padx=10, pady=5, sticky="w")            entry = ctk.CTkEntry(self.dialog)            entry.insert(0, str(value) if value else "")            entry.grid(row=row, column=1, padx=10, pady=5, sticky="ew")            self.entries[field] = entry        # ===== 图片区域 =====        self.img_frame = ctk.CTkFrame(self.dialog)        self.img_frame.grid(row=6, column=0, columnspan=2, pady=10, sticky="nsew")        self.current_image_path = sneaker.image_path        self._refresh_image_preview()        # 按钮区域        self.btn_frame = ctk.CTkFrame(self.dialog)        self.btn_frame.grid(row=7, column=0, columnspan=2, pady=20, sticky="ew")        ctk.CTkButton(self.btn_frame, text="保存修改", fg_color="#4CAF50",                      command=lambda: self.save_changes(sneaker)).pack(side="left", padx=10)        ctk.CTkButton(self.btn_frame, text="取消", fg_color="#757575", command=self.dialog.destroy).pack(side="right",                                                                                                         padx=30)    def save_changes(self, sneaker):        try:            if not self.entries["name"].get().strip():                raise ValueError("名称不能为空")            update_data = {                "name": self.entries["name"].get(),                "brand": self.entries["brand"].get(),                "series": self.entries["series"].get(),                "size": float(self.entries["size"].get()) if self.entries["size"].get() else None,                "purchase_price": float(self.entries["price"].get()),                "purchase_date": self._validate_date(self.entries["date"].get()),            }            # 图片更新逻辑            if self.current_image_path:                import shutil                img_dir = os.path.join("uploads", "images")                os.makedirs(img_dir, exist_ok=True)                _, ext = os.path.splitext(self.current_image_path)                new_path = os.path.join(img_dir, f"sneaker_{sneaker.id}{ext}")                shutil.copy2(self.current_image_path, new_path)                update_data["image_path"] = new_path            else:                update_data["image_path"] = None            SneakerService.update_sneaker(sneaker.id, update_data)            self._load_list()            self.dialog.destroy()            messagebox.showinfo("成功", "修改已保存")        except ValueError as ve:            messagebox.showerror("输入错误", str(ve))        except Exception as e:            messagebox.showerror("保存失败", f"发生错误: {str(e)}")    def _refresh_image_preview(self):        for widget in self.img_frame.winfo_children():            widget.destroy()        if self.current_image_path and os.path.exists(self.current_image_path):            try:                img = resize_image(self.current_image_path, (300, 300))                img_label = ctk.CTkLabel(self.img_frame, image=img, text="")                img_label.image = img                img_label.pack()                btn_frame = ctk.CTkFrame(self.img_frame)                btn_frame.pack(pady=5)                ctk.CTkButton(btn_frame, text="更换图片", command=self._select_new_image).pack(side="left", padx=5)                ctk.CTkButton(btn_frame, text="删除图片", command=self._delete_current_image).pack(side="right", padx=5)            except Exception as e:                ctk.CTkLabel(self.img_frame, text=f"图片加载失败: {str(e)}").pack()        else:            ctk.CTkLabel(self.img_frame, text="[无图片]").pack()            ctk.CTkButton(self.img_frame, text="上传图片", command=self._select_new_image).pack()    def _select_new_image(self):        from tkinter import filedialog        filepath = filedialog.askopenfilename(filetypes=[("Image files", "*.png *.jpg *.jpeg")])        if filepath:            self.current_image_path = filepath            self._refresh_image_preview()    def _delete_current_image(self):        self.current_image_path = None        self._refresh_image_preview()    def _delete_sneaker(self, sneaker_id):        """删除球鞋"""        if messagebox.askyesno("确认删除", "确定要删除这条记录吗？"):            try:                SneakerService.delete_sneaker(sneaker_id)                self._load_list()                self.refresh_home_stats()            except Exception as e:                messagebox.showerror("删除失败", str(e))    def _clear_form(self) -> object:        for entry in self.entries.values():            entry.delete(0, ctk.END)        self.image_path = None    @staticmethod    def _validate_date(date_str):        """验证日期格式"""        try:            datetime.strptime(date_str, "%Y-%m-%d")            return date_str        except ValueError:            raise ValueError("日期格式应为YYYY-MM-DD")    def _create_search_widgets(self):        """创建搜索相关组件"""        # 搜索框容器        search_frame = ctk.CTkFrame(self.management_frame)        search_frame.pack(pady=10, padx=20, fill="x")        # 实时搜索输入框        self.search_entry = ctk.CTkEntry(            search_frame,            placeholder_text="搜索球鞋（名称/品牌/系列）",            width=300        )        self.search_entry.pack(side="left", padx=(0, 10))        self.search_entry.bind("<KeyRelease>", self._on_search_input)        # 高级筛选按钮        self.advanced_filter_btn = ctk.CTkButton(            search_frame,            text="高级筛选 ▼",            command=self._toggle_advanced_filters        )        self.advanced_filter_btn.pack(side="right")        # 高级筛选面板（初始隐藏）        self.advanced_filter_frame = ctk.CTkFrame(self.management_frame)        # 品牌选择        ctk.CTkLabel(self.advanced_filter_frame, text="品牌：").grid(row=0, column=0, padx=5)        self.brand_combobox = ctk.CTkComboBox(            self.advanced_filter_frame,            values=["所有品牌", "Jordan", "Nike", "Adidas", "New Balance","Puma","李宁","安踏", "其他"]        )        self.brand_combobox.grid(row=0, column=1, padx=5)        # 价格范围        ctk.CTkLabel(self.advanced_filter_frame, text="价格范围：").grid(row=0, column=2, padx=5)        self.min_price_entry = ctk.CTkEntry(self.advanced_filter_frame, placeholder_text="最低价", width=100)        self.min_price_entry.grid(row=0, column=3, padx=5)        self.max_price_entry = ctk.CTkEntry(self.advanced_filter_frame, placeholder_text="最高价", width=100)        self.max_price_entry.grid(row=0, column=4, padx=5)        # 应用筛选按钮        ctk.CTkButton(            self.advanced_filter_frame,            text="应用筛选",            command=self._apply_advanced_filters        ).grid(row=0, column=5, padx=10)    def _on_search_input(self, event=None):        """实时搜索输入处理（带防抖）"""        if hasattr(self, "_search_job"):            self.after_cancel(self._search_job)        # 设置500ms防抖延迟        self._search_job = self.after(500, self._perform_search)    def _perform_search(self):        """执行搜索操作"""        try:            search_params = {                "keyword": self.search_entry.get().strip(),                "brand": self.brand_combobox.get() if self.brand_combobox.get() != "所有品牌" else None,                "min_price": self._validate_float(self.min_price_entry.get()),                "max_price": self._validate_float(self.max_price_entry.get())            }            # 调用服务层搜索            filtered = SneakerService.search_sneakers(**search_params)            self._load_list(filtered)        except ValueError as e:            messagebox.showerror("输入错误", str(e))    def _toggle_advanced_filters(self):        """切换高级筛选面板"""        if self.advanced_filter_frame.winfo_ismapped():            self.advanced_filter_frame.pack_forget()            self.advanced_filter_btn.configure(text="高级筛选 ▲")        else:            self.advanced_filter_frame.pack(pady=10, padx=20, fill="x")            self.advanced_filter_btn.configure(text="高级筛选 ▼")    def _apply_advanced_filters(self):        """应用高级筛选"""        self._perform_search()    @staticmethod    def _validate_float(value: str) -> float | None:        """验证浮点数字符串"""        try:            return float(value) if value else None        except ValueError:            raise ValueError("请输入有效的数字")    # 导航事件    def home_button_event(self):        self.select_frame_by_name("home")    def smaster_button_event(self):        self.select_frame_by_name("smaster")    def usage_button_event(self):        self.select_frame_by_name("usage")    def ratings_button_event(self):        self.select_frame_by_name("ratings")    def settings_button_event(self):        self.select_frame_by_name("settings")    def _change_appearance_mode(self, mode):        ctk.set_appearance_mode(mode)